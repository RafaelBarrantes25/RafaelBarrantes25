import random
import time


def crear_matriz(largo, alto):
    """
    Crea una matriz vac√≠a seg√∫n el largo y alto
    E: largo y alto, n√∫meros int
    S: matriz 
    R: int
    """
    if type(largo) != int or type(alto) != int:
        return False
    contador_filas = 0
    lista = []
    tablero = []
    n√∫mero = 1
    contador_columnas = 0
    while contador_filas < alto:
        lista = []
        while contador_columnas < largo:
            lista += [n√∫mero]
            n√∫mero += 1
            contador_columnas += 1
        tablero += [lista]
        contador_columnas = 0
        contador_filas += 1
    return tablero


def invertir_tablero(tablero):
    """
    invierte el orden de las listas, as√≠ se ve como deber√≠a
    E: el tablero
    S: el tablero con las listas invertidas
    R: no
    """
    tablero_nuevo = []
    n√∫mero = len(tablero)-1
    while len(tablero_nuevo) != len(tablero):
        while n√∫mero > -1:
            tablero_nuevo += [tablero[n√∫mero]]
            n√∫mero -= 1
    return tablero_nuevo


def imprimir_tablero(matriz):
    """
    Imprime el tablero
    E: la matriz del tablero
    S: la matriz pero en forma de str para imprimir
    R: no deber√≠an haber...
    """
    if type(matriz) != list:
        return False

    i = 0
    j = 0
    n = len(matriz)
    m = len(matriz[0])

    while i < n:
        while j < m:
            if type(matriz[i][j]) == str:
                print(matriz[i][j], end=" ")
            else:
                print("‚ñ¢", end="  ")

            j += 1
        j = 0
        i += 1
        print()

    while i < n:
        while j < m:
            print(matriz[i][j], end=" ")
            j += 1
        j = 0
        i += 1
        print("")


def verificar_num√©ricos(elecci√≥n):
    """
    verifica que un string contenga √∫nicamente n√∫meros
    E: string
    S: True o False
    R: no deber√≠an haber
    """
    if elecci√≥n == "":
        return False
    texto = elecci√≥n
    while len(texto) > 0:

        if texto[0] != "0" and texto[0] != "1" and texto[0] != "2" and texto[0] != "3" and texto[0] != "4" and texto[0] != "5" and texto[0] != "6" and texto[0] != "7" and texto[0] != "8" and texto[0] != "9":
            return False
        else:
            texto = texto[1:]
    return True


def escaleras(alto, largo):
    """
    Crea la lista de escaleras
    E: tablero
    S: lista de escaleras
    R: no hay
    """
    n√∫mero = abs(0.05*(largo*alto))
    lista = []
    while n√∫mero > 0:
        lista += [random.randint(largo, (largo*alto)-largo*2)]
        n√∫mero -= 1

    return lista


def escaleras_llegada(lista, largo):
    """
    Crea la lista de escaleras
    E: tablero
    S: lista de escaleras
    R: no hay
    """
    lista2 = []
    n√∫mero = 0
    while len(lista2) < len(lista):
        lista2 += [lista[n√∫mero]+random.randint(largo, largo*2)]
        n√∫mero += 1

    return lista2


def a√±adir_escaleras(tablero, escal, escal_fin, n√∫mero):
    tablero_final = []
    fila = []
    i = 0
    j = 0
    n = len(tablero)
    m = len(tablero)

    cuadritos = ["üü•", "üüß", "üü®", "üü©", "üü¶", "üü™", "üü´", "‚¨õ", "‚¨ú", "üî≥", "üî≤", "üÜó"]

    while i < n:
        fila = []
        while j < m:
            if type(tablero[i][j]) == str:
                fila += [tablero[i][j]]
                j += 1
            elif tablero[i][j] == escal[n√∫mero]:
                fila += [cuadritos[n√∫mero]]
                j += 1
            elif tablero[i][j] == escal_fin[n√∫mero]:
                fila += [cuadritos[n√∫mero]]
                j += 1
            else:
                fila += [tablero[i][j]]
                j += 1
        tablero_final += [fila]
        j = 0
        i += 1
    return tablero_final


def serpientes(alto, largo):
    """
    Crea la lista de serpientes
    E: tablero
    S: lista de serpientes
    R: no hay
    """
    n√∫mero = abs(0.05*(largo*alto))
    lista = []
    while n√∫mero > 0:
        lista += [random.randint(largo, (largo*alto)-largo*2)]
        n√∫mero -= 1

    return lista


def serpientes_llegada(lista, largo):
    """
    Crea la lista de serpientes
    E: tablero
    S: lista de serpientes
    R: no hay
    """
    lista2 = []
    n√∫mero = 0
    while len(lista2) < len(lista):
        lista2 += [lista[n√∫mero]+random.randint(largo, largo*2)]
        n√∫mero += 1

    return lista2


def a√±adir_serpientes(tablero, escal, escal_fin, n√∫mero):
    tablero_final = []
    fila = []
    i = 0
    j = 0
    n = len(tablero)
    m = len(tablero)

    cuadritos = ["üî¥", "üü†", "üü°", "üü¢", "üîµ", "üü£", "üü§", "‚ö´", "‚ö™", "‚≠ï", "‚õî", "üîò"]

    while i < n:
        fila = []
        while j < m:
            if type(tablero[i][j]) == str:
                fila += [tablero[i][j]]
                j += 1
            elif tablero[i][j] == escal[n√∫mero]:
                fila += [cuadritos[n√∫mero]]
                j += 1
            elif tablero[i][j] == escal_fin[n√∫mero]:
                fila += [cuadritos[n√∫mero]]
                j += 1
            else:
                fila += [tablero[i][j]]
                j += 1
        tablero_final += [fila]
        j = 0
        i += 1
    return tablero_final


def avanzar_tablero(tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final, tablero_vac√≠o, posici√≥n_jugador_2, posici√≥n_enemigo_2):
    """
    Avanza al jugador en el tablero
    """
    i = 0
    j = 0
    filas = len(tablero)
    columnas = len(tablero[0])
    fila = []

    while i < filas:
        fila = []
        while j < columnas:

            if tablero_vac√≠o[i][j] == posici√≥n_jugador:
                fila += ["‚í∂‚í∂"]
                j += 1
            elif tablero_vac√≠o[i][j] == posici√≥n_enemigo:
                fila += ["XX"]
                j += 1
            elif tablero_vac√≠o[i][j] == posici√≥n_jugador_2:
                fila += ["A2"]
                j += 1
            elif tablero_vac√≠o[i][j] == posici√≥n_enemigo_2:
                fila += ["X2"]
                j += 1
            else:
                fila += [tablero[i][j]]
                j += 1
        tablero_final += [fila]
        j = 0
        i += 1

    return tablero_final


def verificar_elecciones(elecci√≥n):
    """
    verifica que las elecciones que hizo sean v√°lidas
    """
    if elecci√≥n < 10 or elecci√≥n > 15:
        return False
    else:
        return True


def verificar_eventos_inicio(eventos_inicio, eventos_final, serpientes_inicio, serpientes_final):
    """
    Verifica que los eventos generados no tengan duplicados
    E: la lista de eventos
    S: nueva lista eliminando duplicados
    R: no
    """
    n√∫mero = 0
    n√∫mero2 = 1

    while n√∫mero < len(eventos_inicio)-1:

        while n√∫mero2 < len(eventos_inicio)-1:
            if eventos_inicio[n√∫mero] == eventos_inicio[n√∫mero2]:
                eventos_inicio[n√∫mero] += 2
                n√∫mero2 += 1
            else:
                n√∫mero2 += 1
        n√∫mero += 1

    n√∫mero = 0
    n√∫mero2 = 0

    while n√∫mero < len(eventos_inicio)-1:

        while n√∫mero2 < len(eventos_inicio)-1:
            if eventos_inicio[n√∫mero] == eventos_final[n√∫mero2]:
                eventos_inicio[n√∫mero] += 2
                n√∫mero2 += 1
            else:
                n√∫mero2 += 1
        n√∫mero += 1

    n√∫mero = 0
    n√∫mero2 = 0

    while n√∫mero < len(eventos_inicio)-1:

        while n√∫mero2 < len(eventos_inicio)-1:
            if eventos_inicio[n√∫mero] == serpientes_inicio[n√∫mero2]:
                eventos_inicio[n√∫mero] += 2
                n√∫mero2 += 1
            else:
                n√∫mero2 += 1
        n√∫mero += 1

    n√∫mero = 0
    n√∫mero2 = 0

    while n√∫mero < len(eventos_inicio)-1:

        while n√∫mero2 < len(eventos_inicio)-1:
            if eventos_inicio[n√∫mero] == serpientes_final[n√∫mero2]:
                eventos_inicio[n√∫mero] += 2
                n√∫mero2 += 1
            else:
                n√∫mero2 += 1
        n√∫mero += 1

    return eventos_inicio


def men√∫():
    """
    El men√∫ al inicio del juego
    E: ninguna
    S: la opci√≥n que escoge
    R: debe escoger la opci√≥n correcta
    """

    print("Anarquistas")

    print("VS")

    print("Fascistas")
    while True:

        print("")
        print("Opciones:\n1. Iniciar juego\n2. Instrucciones\n3. Fuentes consultadas")
        print("")


        elecci√≥n = input("Escoja una opci√≥n: ")
        if elecci√≥n == "1":
            return True
        if elecci√≥n == "2":
            print("El juego es una recreaci√≥n del juego de"
                  "mesa serpientes y escaleras.")

            print("Se lanzan 3 dados\nEl primero define cu√°ntas casillas avanza.")

            print("El segundo define cu√°ntos proyectos va a ejecutar.")

            print("El tercero define si los proyectos fueron exitosos.")

            print("La eficacia de los proyectos aumenta conforme se avanza con el juego.")

            print("Las casillas de escaleras est√°n representadas con cuadritos de colores:")
            print("")
            print("üü• üüß üü® üü© üü¶ üü™ üü´ ‚¨õ ‚¨ú üî≥ üî≤ üÜó")
         
            print("Cada color aparece 2 veces, al caer en el primer cuadro de un color,")
            print("sube al segundo.")
            
            print("")
            print("Las casillas de serpientes est√°n representadas con c√≠rculos de colores:")
            print("")
            print("üî¥ üü† üü° üü¢ üîµ üü£ üü§ ‚ö´ ‚ö™ ‚≠ï ‚õî üîò")
            
            print("Al igual que con las escaleras, aparece cada color 2 veces,")
            print("pero solo se baja si cae en el segundo c√≠rculo de un color.")

        if elecci√≥n == "4":
            print("Solo hab√≠an 3 opciones, no hay una opci√≥n secreta.")
           
            print("¬øO s√≠?")

            


def ganar_anarquistas():
    print("Ganaron los anarquistas")


def ganar_fascistas():
    print("Ganaron los fascistas")


def iniciar(turno, tablero_nuevo=[], posici√≥n_jugador=0, posici√≥n_enemigo=0, tablero=[], escaleras_inicio_finales=[], escaleras_final=[], serpientes_inicio=[], serpientes_final=[], tama√±o=0, tablero_vac√≠o=[], posici√≥n_jugador_2=0, posici√≥n_enemigo_2=0):
    """
    Inicia el juego
    E: el turno
    S: inicia el juego
    R: ninguna
    """
    if men√∫():
        turno = 0
    if turno == 0:
        tablero = tablero_nuevo

        turno_final = 0 #Sirve para trucar los dados


        if tablero == tablero_nuevo:
            largo = input(
                "¬øCu√°les ser√°n las dimensiones del tablero? (N√∫mero entre 10 y 15):\n")
            alto = largo

            if verificar_num√©ricos(largo) and verificar_num√©ricos(alto):
                largo = int(largo)
                alto = int(alto)
            else:
                print("Eso no es un n√∫mero")
                return iniciar(0)

            if verificar_elecciones(largo) == False or verificar_elecciones(alto) == False:
                print("El n√∫mero debe estar entre 5 y 25")
                return iniciar(0)
            else:
                tablero = crear_matriz(largo, alto)

        # se usa para que se sobrepongan los jugadores y enemigos sobre los eventos
        tablero_vac√≠o = tablero

        tama√±o = largo*alto

        escaleras_inicio = escaleras(largo, alto)
        escaleras_final = escaleras_llegada(escaleras_inicio, largo)

        serpientes_inicio = serpientes(largo, alto)
        serpientes_final = serpientes_llegada(serpientes_inicio, largo)

        cinco_verificaciones = 0
        while cinco_verificaciones != 5:

            escaleras_inicio_finales = verificar_eventos_inicio(
                escaleras_inicio, escaleras_final, serpientes_inicio, serpientes_final)
            cinco_verificaciones += 1

            # Pone las escaleras
        n√∫mero = 0
        tablero4 = []
        while n√∫mero < len(escaleras_inicio_finales):
            tablero4 = a√±adir_escaleras(
                tablero, escaleras_inicio_finales, escaleras_final, n√∫mero)
            n√∫mero += 1
            tablero = tablero4

        # pone las serpientes
        n√∫mero = 0
        tablero4 = []
        while n√∫mero < len(serpientes_inicio):
            tablero4 = a√±adir_serpientes(
                tablero, serpientes_inicio, serpientes_final, n√∫mero)
            n√∫mero += 1
            tablero = tablero4

        imprimir_tablero(invertir_tablero(tablero))

    while True:
        turno = 1
        
        while turno == 1:
            
            posiciones = random.randint(1, 4)
            proyectos = random.randint(1, 4)
            eficacia = random.randint(1, 4)

            # Calcula lo que va a avanzar

            print("Va a avanzar "+str(posiciones) + " casillas")

            if proyectos == 1:
                print("Est√° intentando ejecutar "+str(proyectos)+" proyecto")
            else:
                print("Est√° intentando ejecutar "+str(proyectos)+" proyectos")

            # Comprueba si los proyectos fracasan o no
            if turno_final < largo+alto:
                if eficacia % 2 == 0:
                    print("Los proyectos fueron exitosos, se va a mover " +
                        str(proyectos)+" casillas extra y los fascistas van a retroceder")
                    posici√≥n_jugador += posiciones+proyectos
                    posici√≥n_enemigo -= proyectos
                else:
                    print("Los proyectos fracasaron, no hay bonificaciones")
                    posici√≥n_jugador += posiciones
            if turno_final > largo+alto:
                if eficacia > 1:
                    print("Los proyectos fueron exitosos, se va a mover " +
                    str(proyectos)+" casillas extra y los fascistas van a retroceder")
                    posici√≥n_jugador += posiciones+proyectos
                    posici√≥n_enemigo -= proyectos
                else:
                    print("Los proyectos fracasaron, no hay bonificaciones")
                    posici√≥n_jugador += posiciones

            # Para que la posici√≥n no se vaya a n√∫meros negativos
            if posici√≥n_jugador < 0:
                posici√≥n_jugador = 0
            if posici√≥n_enemigo < 0:
                posici√≥n_enemigo = 0

            revisi√≥n_choques = 0 #Revisa 3 veces si cayeron dos fichas en la misma casilla
            while revisi√≥n_choques < 3 and posici√≥n_jugador > 0:
                if posici√≥n_jugador == posici√≥n_enemigo_2:
                    print("Mala suerte, los anarquistas cayeron en una casilla fascista.")
                    print("Retroceden un espacio.")
                    posici√≥n_jugador -= 1
                if posici√≥n_enemigo == posici√≥n_jugador:
                    print("Mala suerte, los anarquistas cayeron en una casilla fascista.")
                    print("Retroceden un espacio.")
                    posici√≥n_jugador -= 1
                if posici√≥n_jugador_2 == posici√≥n_jugador:
                    print("Los anarquistas cayeron en una de sus propias casillas.")
                    print("Retroceden un espacio.")
                    posici√≥n_jugador -= 1
                revisi√≥n_choques += 1
          

            # comprueba si cay√≥ en una casilla de escaleras o no y lo avanza si s√≠

            revisi√≥n = 0

            while revisi√≥n < len(escaleras_inicio_finales)-1:

                if posici√≥n_jugador == escaleras_inicio_finales[revisi√≥n]:
                    print("")
                    print("")
                    print("Cay√≥ en una escalera")
                    print("Va a subir a la parte de arriba")
                  
                    tablero_3 = avanzar_tablero(
                        tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[], tablero_vac√≠o=tablero_vac√≠o, posici√≥n_jugador_2=posici√≥n_jugador_2, posici√≥n_enemigo_2=posici√≥n_enemigo_2)
                    imprimir_tablero(invertir_tablero(tablero_3))
                    print("")
                    print("")
                    posici√≥n_jugador = escaleras_final[revisi√≥n]
                  
                else:
                    revisi√≥n += 1

            revisi√≥n = 0

            while revisi√≥n < len(serpientes_final)-1:

                if posici√≥n_jugador == serpientes_final[revisi√≥n]:
                    print("")
                    print("")
                    print("Cay√≥ en una serpiente")
                    print("Va a bajar a la cola")
                   
                    tablero_3 = avanzar_tablero(tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[
                    ], tablero_vac√≠o=tablero_vac√≠o, posici√≥n_jugador_2=posici√≥n_jugador_2, posici√≥n_enemigo_2=posici√≥n_enemigo_2)
                    imprimir_tablero(invertir_tablero(tablero_3))
                    print("")
                    print("")
                    posici√≥n_jugador = serpientes_inicio[revisi√≥n]
                    
                else:
                    revisi√≥n += 1

            if posici√≥n_jugador >= tama√±o:
                posici√≥n_jugador = tama√±o
                tablero_2 = avanzar_tablero(
                    tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[], tablero_vac√≠o=tablero_vac√≠o, posici√≥n_jugador_2=posici√≥n_jugador_2, posici√≥n_enemigo_2=posici√≥n_enemigo_2)
                imprimir_tablero(invertir_tablero(tablero_2))
                return ganar_anarquistas()

            tablero_2 = avanzar_tablero(
                tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[], tablero_vac√≠o=tablero_vac√≠o, posici√≥n_jugador_2=posici√≥n_jugador_2, posici√≥n_enemigo_2=posici√≥n_enemigo_2)
            imprimir_tablero(invertir_tablero(tablero_2))

            turno = 2

        while turno == 2:
            
            posiciones = random.randint(1, 4)
            proyectos = random.randint(1, 4)
            eficacia = random.randint(1, 4)

            print("Va a avanzar "+str(posiciones) + " casillas")

            if proyectos == 1:
                print("Est√° intentando ejecutar "+str(proyectos)+" proyecto")
            else:
                print("Est√° intentando ejecutar "+str(proyectos)+" proyectos")

            if turno_final < largo+alto:
                if eficacia % 2 == 0:
                    print("Los proyectos fueron exitosos, se va a mover " +
                        str(proyectos)+" casillas extra y los anarquistas van a retroceder")
                    posici√≥n_enemigo += posiciones+proyectos
                    posici√≥n_jugador -= proyectos
                else:
                    print("Los proyectos fracasaron, no hay bonificaciones")
                    posici√≥n_enemigo += posiciones
            if turno_final > largo+alto:
                if eficacia > 1:
                    print("Los proyectos fueron exitosos, se va a mover " +
                    str(proyectos)+" casillas extra y los anarquistas van a retroceder")
                    posici√≥n_enemigo += posiciones+proyectos
                    posici√≥n_jugador -= proyectos
                else:
                    print("Los proyectos fracasaron, no hay bonificaciones")
                    posici√≥n_enemigo += posiciones

            if posici√≥n_jugador < 0:
                posici√≥n_jugador = 0
            if posici√≥n_enemigo < 0:
                posici√≥n_enemigo = 0

            revisi√≥n_choques = 0 #Revisa 3 veces si cayeron dos fichas en la misma casilla
            while revisi√≥n_choques < 3 and posici√≥n_enemigo > 0:
                if posici√≥n_jugador_2 == posici√≥n_enemigo:
                    print("Buena suerte, los fascistas cayeron en una casilla anarquista.")
                    print("Retroceden un espacio.")
                    posici√≥n_enemigo -= 1
                if posici√≥n_enemigo_2 == posici√≥n_enemigo:
                    print("Buena suerte, los fascistas cayeron en una casilla anarquista.")
                    print("Retroceden un espacio.")
                    posici√≥n_enemigo -= 1
                if posici√≥n_enemigo_2 == posici√≥n_enemigo:
                    print("Los fascistas cayeron en una de sus propias casillas.")
                    print("Retroceden un espacio.")
                    posici√≥n_enemigo -= 1
                revisi√≥n_choques += 1
            

            revisi√≥n = 0
            while revisi√≥n < len(escaleras_inicio_finales)-1:

                if posici√≥n_enemigo == escaleras_inicio_finales[revisi√≥n]:
                    print("")
                    print("")
                    print("Cay√≥ en una escalera")
                    print("Va a subir a la parte de arriba")
                
                    tablero_3 = avanzar_tablero(
                        tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[], tablero_vac√≠o=tablero_vac√≠o, posici√≥n_jugador_2=posici√≥n_jugador_2, posici√≥n_enemigo_2=posici√≥n_enemigo_2)
                    imprimir_tablero(invertir_tablero(tablero_3))
                    print("")
                    print("")
                    posici√≥n_enemigo = escaleras_final[revisi√≥n]
                    
                else:
                    revisi√≥n += 1

            revisi√≥n = 0

            while revisi√≥n < len(serpientes_final)-1:

                if posici√≥n_enemigo == serpientes_final[revisi√≥n]:
                    print("")
                    print("")
                    print("Cay√≥ en una serpiente")
                    print("Va a bajar a la cola")
                 
                    tablero_3 = avanzar_tablero(
                        tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[], tablero_vac√≠o=tablero_vac√≠o, posici√≥n_jugador_2=posici√≥n_jugador_2, posici√≥n_enemigo_2=posici√≥n_enemigo_2)
                    imprimir_tablero(invertir_tablero(tablero_3))
                    print("")
                    print("")
                    posici√≥n_enemigo = serpientes_inicio[revisi√≥n]-1
                   
                else:
                    revisi√≥n += 1

            if posici√≥n_enemigo >= tama√±o:
                posici√≥n_enemigo = tama√±o
                tablero_3 = avanzar_tablero(
                    tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[], tablero_vac√≠o=tablero_vac√≠o, posici√≥n_jugador_2=posici√≥n_jugador_2, posici√≥n_enemigo_2=posici√≥n_enemigo_2)
                imprimir_tablero(invertir_tablero(tablero_3))
                return ganar_fascistas()

            tablero_3 = avanzar_tablero(
                tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[], tablero_vac√≠o=tablero_vac√≠o, posici√≥n_jugador_2=posici√≥n_jugador_2, posici√≥n_enemigo_2=posici√≥n_enemigo_2)
            imprimir_tablero(invertir_tablero(tablero_3))

            turno = 3

        while turno == 3:
            
            posiciones = random.randint(1, 4)
            proyectos = random.randint(1, 4)
            eficacia = random.randint(1, 4)

            # Calcula lo que va a avanzar

            print("Va a avanzar "+str(posiciones) + " casillas")

            if proyectos == 1:
                print("Est√° intentando ejecutar "+str(proyectos)+" proyecto")
            else:
                print("Est√° intentando ejecutar "+str(proyectos)+" proyectos")

            # Comprueba si los proyectos fracasan o no
            if turno_final < largo+alto:
                if eficacia % 2 == 0:
                    print("Los proyectos fueron exitosos, se va a mover " +
                        str(proyectos)+" casillas extra y los fascistas van a retroceder")
                    posici√≥n_jugador_2 += posiciones+proyectos
                    posici√≥n_enemigo_2 -= proyectos
                else:
                    print("Los proyectos fracasaron, no hay bonificaciones")
                    posici√≥n_jugador_2 += posiciones
            if turno_final > largo+alto:
                if eficacia > 1:
                    print("Los proyectos fueron exitosos, se va a mover " +
                    str(proyectos)+" casillas extra y los fascistas van a retroceder")
                    posici√≥n_jugador_2 += posiciones+proyectos
                    posici√≥n_enemigo_2 -= proyectos
                else:
                    print("Los proyectos fracasaron, no hay bonificaciones")
                    posici√≥n_jugador_2 += posiciones


            # Para que la posici√≥n no se vaya a n√∫meros negativos
            if posici√≥n_jugador_2 < 0:
                posici√≥n_jugador_2 = 0
            if posici√≥n_enemigo_2 < 0:
                posici√≥n_enemigo_2 = 0


            revisi√≥n_choques = 0 #Revisa 3 veces si cayeron dos fichas en la misma casilla
            while revisi√≥n_choques < 3 and posici√≥n_jugador_2 > 0:
                if posici√≥n_jugador_2 == posici√≥n_enemigo_2:
                    print("Mala suerte, los anarquistas cayeron en una casilla fascista.")
                    print("Retroceden un espacio.")
                    posici√≥n_jugador_2 -= 1
                if posici√≥n_enemigo == posici√≥n_jugador_2:
                    print("Mala suerte, los anarquistas cayeron en una casilla fascista.")
                    print("Retroceden un espacio.")
                    posici√≥n_jugador_2 -= 1
                if posici√≥n_jugador_2 == posici√≥n_jugador:
                    print("Los anarquistas cayeron en una de sus propias casillas.")
                    print("Retroceden un espacio.")
                    posici√≥n_jugador_2 -= 1
                revisi√≥n_choques += 1
        

            # comprueba si cay√≥ en una casilla de escaleras o no y lo avanza si s√≠

            revisi√≥n = 0

            while revisi√≥n < len(escaleras_inicio_finales)-1:

                if posici√≥n_jugador_2 == escaleras_inicio_finales[revisi√≥n]:
                    print("")
                    print("")
                    print("Cay√≥ en una escalera")
                    print("Va a subir a la parte de arriba")
                 
                    tablero_3 = avanzar_tablero(
                        tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[], tablero_vac√≠o=tablero_vac√≠o, posici√≥n_jugador_2=posici√≥n_jugador_2, posici√≥n_enemigo_2=posici√≥n_enemigo_2)
                    imprimir_tablero(invertir_tablero(tablero_3))
                    print("")
                    print("")
                    posici√≥n_jugador_2 = escaleras_final[revisi√≥n]
                 
                else:
                    revisi√≥n += 1

            revisi√≥n = 0

            while revisi√≥n < len(serpientes_final)-1:

                if posici√≥n_jugador_2 == serpientes_final[revisi√≥n]:
                    print("")
                    print("")
                    print("Cay√≥ en una serpiente")
                    print("Va a bajar a la cola")
                    
                    tablero_3 = avanzar_tablero(tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[
                    ], tablero_vac√≠o=tablero_vac√≠o, posici√≥n_jugador_2=posici√≥n_jugador_2, posici√≥n_enemigo_2=posici√≥n_enemigo_2)
                    imprimir_tablero(invertir_tablero(tablero_3))
                    print("")
                    print("")
                    posici√≥n_jugador_2 = serpientes_inicio[revisi√≥n]
                 
                else:
                    revisi√≥n += 1

            if posici√≥n_jugador_2 >= tama√±o:
                posici√≥n_jugador_2 = tama√±o
                tablero_2 = avanzar_tablero(
                    tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[], tablero_vac√≠o=tablero_vac√≠o, posici√≥n_jugador_2=posici√≥n_jugador_2, posici√≥n_enemigo_2=posici√≥n_enemigo_2)
                imprimir_tablero(invertir_tablero(tablero_2))
                return ganar_anarquistas()

            tablero_2 = avanzar_tablero(
                tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[], tablero_vac√≠o=tablero_vac√≠o, posici√≥n_jugador_2=posici√≥n_jugador_2, posici√≥n_enemigo_2=posici√≥n_enemigo_2)
            imprimir_tablero(invertir_tablero(tablero_2))

            turno = 4

        while turno == 4:
            
            posiciones = random.randint(1, 4)
            proyectos = random.randint(1, 4)
            eficacia = random.randint(1, 4)

            print("Va a avanzar "+str(posiciones) + " casillas")

            if proyectos == 1:
                print("Est√° intentando ejecutar "+str(proyectos)+" proyecto")
            else:
                print("Est√° intentando ejecutar "+str(proyectos)+" proyectos")

            if turno_final < largo+alto:
                if eficacia % 2 == 0:
                    print("Los proyectos fueron exitosos, se va a mover " +
                        str(proyectos)+" casillas extra y los anarquistas van a retroceder")
                    posici√≥n_enemigo_2 += posiciones+proyectos
                    posici√≥n_jugador_2 -= proyectos
                else:
                    print("Los proyectos fracasaron, no hay bonificaciones")
                    posici√≥n_enemigo_2 += posiciones
            if turno_final > largo+alto:
                if eficacia > 1:
                    print("Los proyectos fueron exitosos, se va a mover " +
                    str(proyectos)+" casillas extra y los anarquistas van a retroceder")
                    posici√≥n_enemigo_2 += posiciones+proyectos
                    posici√≥n_jugador_2 -= proyectos
                else:
                    print("Los proyectos fracasaron, no hay bonificaciones")
                    posici√≥n_enemigo_2 += posiciones

            if posici√≥n_jugador_2 < 0:
                posici√≥n_jugador_2 = 0
            if posici√≥n_enemigo_2 < 0:
                posici√≥n_enemigo_2 = 0

            revisi√≥n_choques = 0 #Revisa 3 veces si cayeron dos fichas en la misma casilla
            while revisi√≥n_choques < 3 and posici√≥n_enemigo_2 > 0:
                if posici√≥n_jugador_2 == posici√≥n_enemigo_2:
                    print("Buena suerte, los fascistas cayeron en una casilla anarquista.")
                    print("Retroceden un espacio.")
                    posici√≥n_enemigo_2 -= 1
                if posici√≥n_enemigo_2 == posici√≥n_jugador:
                    print("Buena suerte, los fascistas cayeron en una casilla anarquista.")
                    print("Retroceden un espacio.")
                    posici√≥n_enemigo_2 -= 1
                if posici√≥n_enemigo_2 == posici√≥n_enemigo:
                    print("Los fascistas cayeron en una de sus propias casillas.")
                    print("Retroceden un espacio.")
                    posici√≥n_enemigo_2 -= 1
                revisi√≥n_choques += 1
        

            revisi√≥n = 0
            while revisi√≥n < len(escaleras_inicio_finales)-1:

                if posici√≥n_enemigo_2 == escaleras_inicio_finales[revisi√≥n]:
                    print("")
                    print("")
                    print("Cay√≥ en una escalera")
                    print("Va a subir a la parte de arriba")
                  
                    tablero_3 = avanzar_tablero(
                        tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[], tablero_vac√≠o=tablero_vac√≠o, posici√≥n_jugador_2=posici√≥n_jugador_2, posici√≥n_enemigo_2=posici√≥n_enemigo_2)
                    imprimir_tablero(invertir_tablero(tablero_3))
                    print("")
                    print("")
                    posici√≥n_enemigo_2 = escaleras_final[revisi√≥n]
                 
                else:
                    revisi√≥n += 1

            revisi√≥n = 0

            while revisi√≥n < len(serpientes_final)-1:

                if posici√≥n_enemigo_2 == serpientes_final[revisi√≥n]:
                    print("")
                    print("")
                    print("Cay√≥ en una serpiente")
                    print("Va a bajar a la cola")
               
                    tablero_3 = avanzar_tablero(
                        tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[], tablero_vac√≠o=tablero_vac√≠o, posici√≥n_jugador_2=posici√≥n_jugador_2, posici√≥n_enemigo_2=posici√≥n_enemigo_2)
                    imprimir_tablero(invertir_tablero(tablero_3))
                    print("")
                    print("")
                    posici√≥n_enemigo_2 = serpientes_inicio[revisi√≥n]-1
                 
                else:
                    revisi√≥n += 1

            if posici√≥n_enemigo_2 >= tama√±o:
                posici√≥n_enemigo_2 = tama√±o
                tablero_3 = avanzar_tablero(
                    tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[], tablero_vac√≠o=tablero_vac√≠o, posici√≥n_jugador_2=posici√≥n_jugador_2, posici√≥n_enemigo_2=posici√≥n_enemigo_2)
                imprimir_tablero(invertir_tablero(tablero_3))
                return ganar_fascistas()

            tablero_3 = avanzar_tablero(
                tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[], tablero_vac√≠o=tablero_vac√≠o, posici√≥n_jugador_2=posici√≥n_jugador_2, posici√≥n_enemigo_2=posici√≥n_enemigo_2)
            imprimir_tablero(invertir_tablero(tablero_3))

            turno = 1
            turno_final += 1

    


iniciar(0)
