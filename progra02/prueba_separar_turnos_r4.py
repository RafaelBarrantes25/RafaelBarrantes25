import random
import time


def crear_matriz(largo, alto):
    """
    Crea una matriz vac√≠a seg√∫n el largo y alto
    E: largo y alto, n√∫meros int
    S: matriz 
    R: int
    """
    if type(largo) != int or type(alto) != int:
        return False
    contador_filas = 0
    lista = []
    tablero = []
    n√∫mero = 1
    contador_columnas = 0
    while contador_filas < alto:
        lista = []
        while contador_columnas < largo:
            lista += [n√∫mero]
            n√∫mero += 1
            contador_columnas += 1
        tablero += [lista]
        contador_columnas = 0
        contador_filas += 1
    return tablero


def invertir_tablero(tablero):
    """
    invierte el orden de las listas, as√≠ se ve como deber√≠a
    E: el tablero
    S: el tablero con las listas invertidas
    R: no
    """
    tablero_nuevo = []
    n√∫mero = len(tablero)-1
    while len(tablero_nuevo) != len(tablero):
        while n√∫mero > -1:
            tablero_nuevo += [tablero[n√∫mero]]
            n√∫mero -= 1
    return tablero_nuevo


def imprimir_tablero(matriz):
    """
    Imprime el tablero
    E: la matriz del tablero
    S: la matriz pero en forma de str para imprimir
    R: no deber√≠an haber...
    """
    if type(matriz) != list:
        return False

    i = 0
    j = 0
    n = len(matriz)
    m = len(matriz[0])

    while i < n:
        while j < m:
            if type(matriz[i][j]) == str:
                print(matriz[i][j], end=" ")
            else:
                print("‚ñ¢", end="  ")

            j += 1
        j = 0
        i += 1
        print()

    while i < n:
        while j < m:
            print(matriz[i][j], end=" ")
            j += 1
        j = 0
        i += 1
        print("")


def verificar_num√©ricos(elecci√≥n):
    """
    verifica que un string contenga √∫nicamente n√∫meros
    E: string
    S: True o False
    R: no deber√≠an haber
    """
    if elecci√≥n == "":
        return False
    texto = elecci√≥n
    while len(texto) > 0:

        if texto[0] != "0" and texto[0] != "1" and texto[0] != "2" and texto[0] != "3" and texto[0] != "4" and texto[0] != "5" and texto[0] != "6" and texto[0] != "7" and texto[0] != "8" and texto[0] != "9":
            return False
        else:
            texto = texto[1:]
    return True


def escaleras(alto, largo):
    """
    Crea la lista de escaleras
    E: tablero
    S: lista de escaleras
    R: no hay
    """
    n√∫mero = abs(0.05*(largo*alto))
    lista = []
    while n√∫mero > 0:
        lista += [random.randint(largo, (largo*alto)-largo*2)]
        n√∫mero -= 1

    return lista


def escaleras_llegada(lista, largo):
    """
    Crea la lista de escaleras
    E: tablero
    S: lista de escaleras
    R: no hay
    """
    lista2 = []
    n√∫mero = 0
    while len(lista2) < len(lista):
        lista2 += [lista[n√∫mero]+random.randint(largo, largo*2)]
        n√∫mero += 1

    return lista2


def a√±adir_escaleras(tablero, escal, escal_fin, n√∫mero):
    tablero_final = []
    fila = []
    i = 0
    j = 0
    n = len(tablero)
    m = len(tablero)

    cuadritos = ["üü•", "üüß", "üü®", "üü©", "üü¶", "üü™", "üü´", "‚¨õ", "‚¨ú", "üî≥", "üî≤", "üÜó"]

    while i < n:
        fila = []
        while j < m:
            if type(tablero[i][j]) == str:
                fila += [tablero[i][j]]
                j += 1
            elif tablero[i][j] == escal[n√∫mero]:
                fila += [cuadritos[n√∫mero]]
                j += 1
            elif tablero[i][j] == escal_fin[n√∫mero]:
                fila += [cuadritos[n√∫mero]]
                j += 1
            else:
                fila += [tablero[i][j]]
                j += 1
        tablero_final += [fila]
        j = 0
        i += 1
    return tablero_final




def serpientes(alto, largo):
    """
    Crea la lista de serpientes
    E: tablero
    S: lista de serpientes
    R: no hay
    """
    n√∫mero = abs(0.05*(largo*alto))
    lista = []
    while n√∫mero > 0:
        lista += [random.randint(largo, (largo*alto)-largo*2)]
        n√∫mero -= 1

    return lista


def serpientes_llegada(lista, largo):
    """
    Crea la lista de serpientes
    E: tablero
    S: lista de serpientes
    R: no hay
    """
    lista2 = []
    n√∫mero = 0
    while len(lista2) < len(lista):
        lista2 += [lista[n√∫mero]+random.randint(largo, largo*2)]
        n√∫mero += 1

    return lista2


def a√±adir_serpientes(tablero, escal, escal_fin, n√∫mero):
    tablero_final = []
    fila = []
    i = 0
    j = 0
    n = len(tablero)
    m = len(tablero)

    cuadritos = ["üî¥", "üü†", "üü°", "üü¢", "üîµ", "üü£", "üü§", "‚ö´", "‚ö™", "‚≠ï", "‚õî", "üîò"]

    while i < n:
        fila = []
        while j < m:
            if type(tablero[i][j]) == str:
                fila += [tablero[i][j]]
                j += 1
            elif tablero[i][j] == escal[n√∫mero]:
                fila += [cuadritos[n√∫mero]]
                j += 1
            elif tablero[i][j] == escal_fin[n√∫mero]:
                fila += [cuadritos[n√∫mero]]
                j += 1
            else:
                fila += [tablero[i][j]]
                j += 1
        tablero_final += [fila]
        j = 0
        i += 1
    return tablero_final

def avanzar_tablero(tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final,tablero_vac√≠o):
    """
    Avanza al jugador en el tablero
    """
    i = 0
    j = 0
    filas = len(tablero)
    columnas = len(tablero[0])
    fila = []

    while i < filas:
        fila = []
        while j < columnas:

            if tablero_vac√≠o[i][j] == posici√≥n_jugador:
                fila += ["‚í∂‚í∂"]
                j += 1
            elif tablero_vac√≠o[i][j] == posici√≥n_enemigo:
                fila += ["XX"]
                j += 1

            else:
                fila += [tablero[i][j]]
                j += 1
        tablero_final += [fila]
        j = 0
        i += 1

    return tablero_final


def verificar_elecciones(elecci√≥n):
    """
    verifica que las elecciones que hizo sean v√°lidas
    """
    if elecci√≥n < 10 or elecci√≥n > 15:
        return False
    else:
        return True


def verificar_eventos_inicio(eventos_inicio, eventos_final,serpientes_inicio,serpientes_final):
    """
    Verifica que los eventos generados no tengan duplicados
    E: la lista de eventos
    S: nueva lista eliminando duplicados
    R: no
    """
    n√∫mero = 0
    n√∫mero2 = 1

    while n√∫mero < len(eventos_inicio)-1:

        while n√∫mero2 < len(eventos_inicio)-1:
            if eventos_inicio[n√∫mero] == eventos_inicio[n√∫mero2]:
                eventos_inicio[n√∫mero] += 2
                n√∫mero2 += 1
            else:
                n√∫mero2 += 1
        n√∫mero += 1

    n√∫mero = 0
    n√∫mero2 = 0

    while n√∫mero < len(eventos_inicio)-1:

        while n√∫mero2 < len(eventos_inicio)-1:
            if eventos_inicio[n√∫mero] == eventos_final[n√∫mero2]:
                eventos_inicio[n√∫mero] += 2
                n√∫mero2 += 1
            else:
                n√∫mero2 += 1
        n√∫mero += 1


    n√∫mero = 0
    n√∫mero2 = 0

    while n√∫mero < len(eventos_inicio)-1:

        while n√∫mero2 < len(eventos_inicio)-1:
            if eventos_inicio[n√∫mero] == serpientes_inicio[n√∫mero2]:
                eventos_inicio[n√∫mero] += 2
                n√∫mero2 += 1
            else:
                n√∫mero2 += 1
        n√∫mero += 1


    n√∫mero = 0
    n√∫mero2 = 0

    while n√∫mero < len(eventos_inicio)-1:

        while n√∫mero2 < len(eventos_inicio)-1:
            if eventos_inicio[n√∫mero] == serpientes_final[n√∫mero2]:
                eventos_inicio[n√∫mero] += 2
                n√∫mero2 += 1
            else:
                n√∫mero2 += 1
        n√∫mero += 1

    return eventos_inicio


def men√∫():
    """
    El men√∫ al inicio del juego
    E: ninguna
    S: la opci√≥n que escoge
    R: debe escoger la opci√≥n correcta
    """

    print("Anarquistas VS Fascistas")

    time.sleep(3)
    print("")
    print("Opciones:\n1. Iniciar juego\n2. Instrucciones\n3. Fuentes consultadas")
    print("")
    time.sleep(1)
    while True:
        elecci√≥n = input("Escoja una opci√≥n: ")
        if elecci√≥n == "1":
            return True
        if elecci√≥n == "2":
            print("El juego es una recreaci√≥n del juego de" \
            "mesa serpientes y escaleras.")
            time.sleep(3)
            print("FALTA ESCRIBIR LAS" \
            "OPCUEOSNWF" \
            "R" \
            "TF4" \
            "ER4G}FERG" \
            "" \
            "YRU" \
            "R6U" \
            "6TFF" \
            "U" \
            "6TI" \
            "6TD" \
            "8R" \
            "7" \
            "6" \
            "F7" \
            "R5" \
            "U" \
            "6TPO" \
            "U" \
            "YTR" \
            "XYH" \
            "" \
            "C57U" \
            "T6" \
            "UJ" \
            "XR" \
            "6" \
            "RXU" \
            "")


def ganar_anarquistas():
    print("Ganaron los anarquistas")

def ganar_fascistas():
    print("Ganaron los fascistas")



def turno_jugador(turno,posici√≥n_jugador=0, posici√≥n_enemigo=0, tablero=[], escaleras_inicio_finales=[], escaleras_final=[],serpientes_inicio=[],serpientes_final=[],tama√±o=0,tablero_vac√≠o=[]):
    """
    Ejecuta el turno del jugador
    E: la posici√≥n del jugador y el enemigo, el tablero editado,
    las casillas de serpientes y escaleras, el tama√±o del tablero
    y el tablero vac√≠o, solo los n√∫meros
    S: ejecuta el turno del jugador, entonces lo avanza
    R: no hay
    """
    input("Presione enter para lanzar los dados")
    posiciones = random.randint(1, 4)
    proyectos = random.randint(1, 4)
    eficacia = random.randint(1, 4)

    # Calcula lo que va a avanzar

    print("Va a avanzar "+str(posiciones) + " casillas")

    if proyectos == 1:
        print("Est√° intentando ejecutar "+str(proyectos)+" proyecto")
    else:
        print("Est√° intentando ejecutar "+str(proyectos)+" proyectos")

    # Comprueba si los proyectos fracasan o no
    if eficacia % 2 == 0:
        print("Los proyectos fueron exitosos, se va a mover " +
                str(proyectos)+" casillas extra y los fascistas van a retroceder")
        posici√≥n_jugador += posiciones+proyectos
        posici√≥n_enemigo -= proyectos

    else:
        print("Los proyectos fracasaron, no hay bonificaciones")
        posici√≥n_jugador += posiciones

    # Para que la posici√≥n no se vaya a n√∫meros negativos
    if posici√≥n_jugador < 0:
        posici√≥n_jugador = 0
    if posici√≥n_enemigo < 0:
        posici√≥n_enemigo = 0
    if posici√≥n_jugador == posici√≥n_enemigo:
        print("Qu√© mala suerte, cay√≥ en una casilla fascista.")
        print("Retrocede un espacio.")
        posici√≥n_jugador -= 1

    # comprueba si cay√≥ en una casilla de escaleras o no y lo avanza si s√≠

    revisi√≥n = 0

    while revisi√≥n < len(escaleras_inicio_finales)-1:

        if posici√≥n_jugador == escaleras_inicio_finales[revisi√≥n]:
            print("")
            print("")
            print("Cay√≥ en una escalera")
            print("Va a subir a la parte de arriba")
            time.sleep(1)
            tablero_3 = avanzar_tablero(
            tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[],tablero_vac√≠o=tablero_vac√≠o)
            imprimir_tablero(invertir_tablero(tablero_3))
            print("")
            print("")
            posici√≥n_jugador = escaleras_final[revisi√≥n]
            time.sleep(1)
        else:
            revisi√≥n += 1



    revisi√≥n = 0

    while revisi√≥n < len(serpientes_final)-1:

        if posici√≥n_jugador == serpientes_final[revisi√≥n]:
            print("")
            print("")
            print("Cay√≥ en una serpiente")
            print("Va a bajar a la cola")
            time.sleep(1)
            tablero_3 = avanzar_tablero(tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[],tablero_vac√≠o=tablero_vac√≠o)
            imprimir_tablero(invertir_tablero(tablero_3))
            print("")
            print("")
            posici√≥n_jugador = serpientes_inicio[revisi√≥n]
            time.sleep(1)
        else:
            revisi√≥n += 1


    if posici√≥n_jugador >= tama√±o:
        posici√≥n_jugador = tama√±o
        tablero_2 = avanzar_tablero(
        tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[],tablero_vac√≠o=tablero_vac√≠o)
        imprimir_tablero(invertir_tablero(tablero_2))
        return ganar_anarquistas()


    tablero_2 = avanzar_tablero(
        tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[],tablero_vac√≠o=tablero_vac√≠o)
    imprimir_tablero(invertir_tablero(tablero_2))

    turno += 1
    return juego(turno,tablero_nuevo=[], posici√≥n_jugador=0, posici√≥n_enemigo=0, tablero=[], escaleras_inicio_finales=[], escaleras_final=[],serpientes_inicio=[],serpientes_final=[],tama√±o=0,tablero_vac√≠o=[])






def turno_enemigo(turno,tablero_nuevo=[], posici√≥n_jugador=0, posici√≥n_enemigo=0, tablero=[], escaleras_inicio_finales=[], escaleras_final=[],serpientes_inicio=[],serpientes_final=[],tama√±o=0,tablero_vac√≠o=[]):

    input("Presione enter para el turno de los fascistas")
    posiciones_f = random.randint(1, 4)
    proyectos_f = random.randint(1, 4)
    eficacia_f = random.randint(1, 4)

    print("Va a avanzar "+str(posiciones_f) + " casillas")

    if proyectos_f == 1:
        print("Est√° intentando ejecutar "+str(proyectos_f)+" proyecto")
    else:
        print("Est√° intentando ejecutar "+str(proyectos_f)+" proyectos")

    if eficacia_f % 2 == 0:
        print("Los proyectos fueron exitosos, se va a mover " +
                str(proyectos_f)+" casillas extra y los anarquistas van a retroceder")
        posici√≥n_enemigo += posiciones_f+proyectos_f
        posici√≥n_jugador -= proyectos_f
    else:
        print("Los proyectos fracasaron, no hay bonificaciones")
        posici√≥n_enemigo += posiciones_f

    if posici√≥n_jugador < 0:
        posici√≥n_jugador = 0
    if posici√≥n_enemigo < 0:
        posici√≥n_enemigo = 0
    if posici√≥n_jugador == posici√≥n_enemigo:
        print("Buena suerte, los fascistas cayeron en una casilla anarquista.")
        print("Retroceden un espacio.")
        posici√≥n_enemigo -= 1

    revisi√≥n = 0
    while revisi√≥n < len(escaleras_inicio_finales)-1:

        if posici√≥n_enemigo == escaleras_inicio_finales[revisi√≥n]:
            print("")
            print("")
            print("Cay√≥ en una escalera")
            print("Va a subir a la parte de arriba")
            time.sleep(1)
            tablero_3 = avanzar_tablero(
            tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[],tablero_vac√≠o=tablero_vac√≠o)
            imprimir_tablero(invertir_tablero(tablero_3))
            print("")
            print("")
            posici√≥n_enemigo = escaleras_final[revisi√≥n]
            time.sleep(1)
        else:
            revisi√≥n += 1



    revisi√≥n = 0

    while revisi√≥n < len(serpientes_final)-1:

        if posici√≥n_enemigo == serpientes_final[revisi√≥n]:
            print("")
            print("")
            print("Cay√≥ en una serpiente")
            print("Va a bajar a la cola")
            time.sleep(1)
            tablero_3 = avanzar_tablero(
            tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[],tablero_vac√≠o=tablero_vac√≠o)
            imprimir_tablero(invertir_tablero(tablero_3))
            print("")
            print("")
            posici√≥n_enemigo = serpientes_inicio[revisi√≥n]-1
            time.sleep(1)
        else:
            revisi√≥n += 1

    if posici√≥n_enemigo >= tama√±o:
        posici√≥n_enemigo = tama√±o
        tablero_3 = avanzar_tablero(
        tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[],tablero_vac√≠o=tablero_vac√≠o)
        imprimir_tablero(invertir_tablero(tablero_3))
        return ganar_fascistas()

    tablero_3 = avanzar_tablero(
        tablero, posici√≥n_jugador, posici√≥n_enemigo, tablero_final=[],tablero_vac√≠o=tablero_vac√≠o)
    imprimir_tablero(invertir_tablero(tablero_3))


    turno += 1
    return juego(turno, tablero_3, posici√≥n_jugador, posici√≥n_enemigo, tablero, escaleras_inicio_finales, escaleras_final,serpientes_inicio,serpientes_final,tama√±o,tablero_vac√≠o)











def iniciar():
    """
    Inicia el juego
    E: el turno
    S: inicia el juego
    R: ninguna
    """
   
    largo = input(
        "¬øCu√°l ser√° el largo del tablero? (N√∫mero entre 10 y 15):\n")
    alto = input(
        "¬øCu√°l ser√° el alto del tablero? (N√∫mero entre 10 y 15):\n")

    if verificar_num√©ricos(largo) and verificar_num√©ricos(alto):
        largo = int(largo)
        alto = int(alto)
    else:
        print("Eso no es un n√∫mero")
        return iniciar()

    if verificar_elecciones(largo) == False or verificar_elecciones(alto) == False:
        print("El n√∫mero debe estar entre 10 y 15")
        return iniciar()
    else:
        tablero = crear_matriz(largo, alto)

    tablero_vac√≠o = tablero


    escaleras_inicio = escaleras(largo, alto)
    escaleras_final = escaleras_llegada(escaleras_inicio, largo)

    serpientes_inicio = serpientes(largo, alto)
    serpientes_final = serpientes_llegada(serpientes_inicio, largo)

    cinco_verificaciones = 0
    while cinco_verificaciones != 5:

        escaleras_inicio_finales = verificar_eventos_inicio(
            escaleras_inicio, escaleras_final,serpientes_inicio,serpientes_final)
        cinco_verificaciones += 1

        # Pone las escaleras
    n√∫mero = 0
    tablero4 = []
    while n√∫mero < len(escaleras_inicio_finales):
        tablero4 = a√±adir_escaleras(
            tablero, escaleras_inicio_finales, escaleras_final, n√∫mero)
        n√∫mero += 1
        tablero = tablero4

    #pone las serpientes
    n√∫mero = 0
    tablero4 = []
    while n√∫mero < len(serpientes_inicio):
        tablero4 = a√±adir_serpientes(
            tablero, serpientes_inicio, serpientes_final, n√∫mero)
        n√∫mero += 1
        tablero = tablero4

    imprimir_tablero(invertir_tablero(tablero))

    return tablero


def juego(turno, tablero_nuevo=[], posici√≥n_jugador=0, posici√≥n_enemigo=0, escaleras_inicio_finales=[], escaleras_final=[],serpientes_inicio=[],serpientes_final=[],largo=0,alto=0,tablero_vac√≠o=[]):
    """
    Ejecuta el juego
    """
    if turno == 0:
        posici√≥n_jugador = 0
        posici√≥n_enemigo = 0

        tama√±o = largo*alto

        tablero = iniciar()
        tablero_vac√≠o = crear_matriz(largo,alto)
        tablero_vac√≠o = invertir_tablero(tablero_vac√≠o)
        turno = 1

    if turno > 0:
        while posici√≥n_jugador < 100 and posici√≥n_enemigo < 100:
            
            turno_jugador(turno,posici√≥n_jugador, posici√≥n_enemigo,tablero, escaleras_inicio_finales, escaleras_final,serpientes_inicio,serpientes_final,tama√±o,tablero_vac√≠o)
            

juego(0)